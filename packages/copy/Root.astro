---
import Context from "@astro-aria/context";
import id from "@astro-aria/id";
import Trim from "@astro-aria/trim";

type Props = {
  [x: string]: any;
};

const { ...attributes } = Astro.props;

const dictionary = {
  id: id(),
};
---

<Trim>
  <Context dictionary={dictionary}>
    <astro-copy data-props={[dictionary.id]} {...attributes}>
      <slot />
    </astro-copy>
  </Context>
</Trim>

<script>
  class AstroCopy extends HTMLElement {
    constructor() {
      super();

      // Get the component's root element and extract the ID from the dataset properties
      const root = this;
      const [id] = root.dataset.props!.split(",");

      // Select the trigger and content elements based on the ID
      const trigger = root.querySelector<HTMLElement>(`[id="trigger:${id}"]`);
      const content = root.querySelector<HTMLElement>(`[id="content:${id}"]`);

      // Check if both trigger and content elements exist
      if (trigger && content) {
        // Add a click event listener to the trigger element
        trigger.addEventListener("click", () => {
          // If the content has text, copy it to the clipboard
          if (content.textContent) {
            navigator.clipboard.writeText(content.textContent);

            // Set the trigger's state to "active" when clicked
            trigger.dataset.state = "active";

            // Reset the trigger's state to "inactive" after 2 seconds
            setTimeout(() => {
              trigger.dataset.state = "inactive";
            }, 2000);
          }
        });
      }
    }
  }

  // Define the custom element
  customElements.define("astro-copy", AstroCopy);
</script>
