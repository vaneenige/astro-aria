---
import Context from "@astro-aria/context";
import id from "@astro-aria/id";
import Trim from "@astro-aria/trim";

type Props = {
  open?: boolean;
  [x: string]: any;
};

const { open, ...attributes } = Astro.props;

const dictionary = {
  id: id(),
  open: open || false,
};
---

<Trim>
  <Context
    dictionary={dictionary}
    attributes={{
      "data-state": ["active", "inactive"],
      "data-hidden": [false, true],
    }}
  >
    <astro-disclosure
      data-props={[dictionary.id, dictionary.open ? "" : "1"]}
      {...attributes}
    >
      <slot />
    </astro-disclosure>
  </Context>
</Trim>

<script>
  class AstroDisclosure extends HTMLElement {
    constructor() {
      super();

      // Get the component's root element and extract ID and open state from the dataset properties
      const root = this;
      const [id, open] = root.dataset.props!.split(",");

      // Select the trigger and content elements based on the ID
      const trigger = root.querySelector<HTMLElement>(`[id="trigger:${id}"]`);
      const content = root.querySelector<HTMLElement>(`[id="content:${id}"]`);

      // Check if both trigger and content elements exist
      if (trigger && content) {
        // Initialize the open state (convert the initial 'open' value)
        let isOpen = !open;

        // Add a click event listener to the trigger element
        trigger.addEventListener("click", () => {
          // Toggle the open state on click
          isOpen = !isOpen;

          // Update trigger and content states based on the new open state
          trigger.dataset.state = isOpen ? "active" : "inactive";
          content.dataset.state = isOpen ? "active" : "inactive";

          // Update ARIA attributes for accessibility
          trigger.setAttribute("aria-expanded", String(isOpen));

          // Show or hide the content based on the open state
          content.hidden = !isOpen;
        });
      }
    }
  }

  // Define the custom element
  customElements.define("astro-disclosure", AstroDisclosure);
</script>
