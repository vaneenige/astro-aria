---
import { AstroComponentFactory } from "astro/dist/runtime/server/render/astro/factory";

// Define Queue type: string or [component, attributes, optional inner HTML]
type Queue = (
  | string
  | [AstroComponentFactory, Record<string, string>, string?]
)[];

// Extract HTML (or fallback to default slot) and components from Astro props
const { html = await Astro.slots.render("default"), components } = Astro.props;

// Initialize queue for parsed HTML and components
let queue: Queue = [];

if (components) {
  let lastIndex = 0;
  let match;

  // Build regex for component tags
  const componentTags = Object.keys(components).join("|");

  // Match all opening tags
  const tagRegex = new RegExp(`<(${componentTags})(\\s[^>]*)?\\s*>`, "g");

  while ((match = tagRegex.exec(html))) {
    // Add plain HTML before match to queue
    if (match.index > lastIndex) {
      queue.push(html.slice(lastIndex, match.index));
    }

    let attributes = {};
    if (match[2]) {
      match[2].replace(/(\w+)\s*=\s*"([^"]*)"/g, (_, key, value) => {
        attributes[key] = value;
      });
    }

    // Check if a closing tag exists to handle self-contained tags
    const closingTagRegex = new RegExp(`</${match[1]}>`);
    if (!closingTagRegex.test(html.slice(match.index))) {
      queue.push([components[match[1]], attributes]);
      lastIndex = match.index + match[0].length;
      continue;
    }

    // Find the corresponding closing tag
    let startIndex = match.index + match[0].length;
    let stack = 1;
    let innerHtml = "";
    let closingMatch;

    // Create regex to match the specific open/close tag pair
    const openCloseTagRegex = new RegExp(
      `<(${match[1]})(?=\\s|\\/|>|$)[^>]*>|<\\/(${match[1]})>`,
      "g"
    );

    // Set search position after the opening tag
    openCloseTagRegex.lastIndex = startIndex;

    // Find corresponding closing tag, accounting for nesting
    while ((closingMatch = openCloseTagRegex.exec(html))) {
      if (closingMatch[1]) {
        // Found opening tag, increment stack
        stack++;
      } else if (closingMatch[2]) {
        // Found closing tag, decrement stack
        stack--;
      }

      if (stack === 0) {
        // Stack is 0: found matching closing tag
        innerHtml = html.slice(startIndex, closingMatch.index);

        // Update lastIndex to continue after closing tag
        lastIndex = closingMatch.index + closingMatch[0].length;

        // Skip inner HTML to avoid reprocessing nested components
        tagRegex.lastIndex = lastIndex;
        break;
      }
    }

    // Add component with inner HTML to queue
    queue.push([components[match[1]], attributes, innerHtml]);
  }

  // Add remaining plain HTML after last match
  if (lastIndex < html.length) {
    queue.push(html.slice(lastIndex));
  }
}
---

{
  queue.length ? (
    queue.map((item) => {
      if (typeof item === "string") {
        return <Fragment set:html={item} />;
      }
      const [Component, attributes, html] = item;
      if (!html) {
        return <Component {...attributes} />;
      }
      return (
        <Component {...attributes}>
          <Astro.self html={html} components={components} />
        </Component>
      );
    })
  ) : (
    <Fragment set:html={html} />
  )
}
