---
import Context from "@astro-aria/context";
import id from "@astro-aria/id";
import Trim from "@astro-aria/trim";

type Props = {
  sync?: string;
  orientation?: "horizontal" | "vertical";
  activation?: "automatic" | "manual";
  value?: string;
  [x: string]: any;
};

const { orientation, activation, value, sync, ...attributes } = Astro.props;

const dictionary = {
  id: id(),
  orientation: orientation ?? "horizontal",
  activation: activation ?? "automatic",
  value,
};
---

<Trim>
  <Context
    dictionary={dictionary}
    attributes={{
      tabindex: ["0", "-1"],
      "data-state": ["active", "inactive"],
      hidden: [false, true],
    }}
    modifier={(html) => {
      let tabIndex = 0;
      html = html.replace(/role="tab"[^>]*>/g, (match) =>
        match.replaceAll("$id", (tabIndex += 1).toString()),
      );
      let tabPanelIndex = 0;
      html = html.replace(/role="tabpanel"[^>]*>/g, (match) =>
        match.replaceAll("$id", (tabPanelIndex += 1).toString()),
      );
      if (!dictionary.value) {
        const match = /id="tab:[^)]+\):([^"]+)"/.exec(html);
        dictionary.value = match ? match[1] : undefined;
      }
      return html;
    }}
  >
    <astro-tabs
      data-props={[
        dictionary.id,
        dictionary.orientation === "horizontal" ? "" : "1",
        dictionary.activation === "automatic" ? "focus" : "click",
        sync,
      ]}
      {...attributes}
    >
      <slot />
    </astro-tabs>
  </Context>
</Trim>

<script>
  type Listener<T> = (state: T) => void;

  const listeners: Listener<any>[] = [];
  const [on, emit] = [
    (listener: Listener<any>) => listeners.push(listener),
    (state: any) => listeners.forEach((listener) => listener(state)),
  ];

  function AstroTab(root: HTMLElement) {
    const [id, orientation, activation, sync] = root.dataset.props!.split(",");

    const tabs = [...root.querySelectorAll<HTMLElement>(`[id^="tab:${id}"]`)];
    const panels = [...root.querySelectorAll<HTMLElement>(`[id^="tabpanel:${id}"]`)];

    const { length } = tabs;
    const horizontal = !orientation;

    let offset = 0;

    const keyActions = {
      [horizontal ? "ArrowRight" : "ArrowDown"]: (i: number) => (i + 1) % length,
      [horizontal ? "ArrowLeft" : "ArrowUp"]: (i: number) => (i - 1 + length) % length,
      Home: () => 0,
      End: () => length - 1,
    };

    function activateTabById(id: string) {
      const tab = tabs.find((t) => t.id.endsWith(id));

      if (tab) {
        panels.forEach((p) => {
          const match = p.id !== tab.getAttribute("aria-controls");
          p.hidden = match;
          p.dataset.state = !match ? "active" : "inactive";
        });

        tabs.forEach((t) => {
          const match = t === tab;
          t.setAttribute("aria-selected", String(match));
          t.setAttribute("tabindex", match ? "0" : "-1");
          t.dataset.state = match ? "active" : "inactive";
        });

        if (offset !== 0) {
          scrollTo({ top: scrollY + root.getBoundingClientRect().top - offset });
          offset = 0;
        }
      }
    }

    tabs.forEach((tab, i) => {
      tab.addEventListener("keydown", (e) => {
        const focusTargetIndex = keyActions[e.key]?.(i) ?? i;
        if (focusTargetIndex !== i) {
          e.preventDefault();
          tabs[focusTargetIndex].focus();
        }
      });

      tab.addEventListener(activation, () => {
        const id = tabs[i].id.split(":")[2];
        offset = root.getBoundingClientRect().top;
        if (sync) {
          emit([sync, id]);
        } else {
          activateTabById(id);
        }
      });
    });

    on(([tagName, id]) => {
      if (tagName === sync) {
        activateTabById(id);
      }
    });
  }

  document.querySelectorAll<HTMLElement>("astro-tabs").forEach(AstroTab);
</script>
