---
import Context from "@astro-aria/context";
import id from "@astro-aria/id";
import Trim from "@astro-aria/trim";
import children from "@astro-aria/children";

type Props = {
  orientation?: "horizontal" | "vertical";
  activation?: "automatic" | "manual";
  value?: string;
  [x: string]: any;
};

const { orientation, activation, value, ...attributes } = Astro.props;

const dictionary = {
  id: id(),
  orientation: orientation ?? "horizontal",
  activation: activation ?? "automatic",
  value,
};

const html = await Astro.slots.render("default");

const nodes = children(html);

const tabs = nodes.filter((node) => node.includes('id="tab:($context:id)'));
const panels = nodes.filter((node) => node.includes('id="tabpanel:($context:id)'));
---

<Trim>
  <Context
    dictionary={dictionary}
    attributes={{
      tabindex: ["0", "-1"],
      "data-state": ["active", "inactive"],
      hidden: [false, true],
    }}
    modifier={(html) => {
      let tabIndex = 0;
      html = html.replace(/role="tab"[^>]*>/g, (match) =>
        match.replaceAll("$id", (tabIndex += 1).toString()),
      );
      let tabPanelIndex = 0;
      html = html.replace(/role="tabpanel"[^>]*>/g, (match) =>
        match.replaceAll("$id", (tabPanelIndex += 1).toString()),
      );
      if (!dictionary.value) {
        const match = /id="tab:[^)]+\):([^"]+)"/.exec(html);
        dictionary.value = match ? match[1] : undefined;
      }
      return html;
    }}
  >
    <astro-tabs
      data-props={[
        dictionary.id,
        dictionary.orientation === "horizontal" ? "" : "1",
        dictionary.activation === "automatic" ? "focus" : "click",
      ]}
      {...attributes}
    >
      <div role="tablist" aria-orientation={orientation}>
        <Fragment set:html={tabs} />
      </div>
      <Fragment set:html={panels} />
    </astro-tabs>
  </Context>
</Trim>

<script>
  type Listener<T> = (state: T) => void;

  // Set up listeners array and utility functions for event handling
  const listeners: Listener<string>[] = [];
  const [on, emit] = [
    (listener: Listener<string>) => listeners.push(listener),
    (state: string) => listeners.forEach((listener) => listener(state)),
  ];

  class AstroTabs extends HTMLElement {
    constructor() {
      super();

      // Get the component's root element and dataset properties
      const root = this;
      const [id, orientation, activation] = root.dataset.props!.split(",");

      // Select all tabs and panels based on the id
      const tabs = [...root.querySelectorAll<HTMLElement>(`[id^="tab:${id}"]`)];
      const panels = [...root.querySelectorAll<HTMLElement>(`[id^="tabpanel:${id}"]`)];

      // Store the total number of tabs
      const { length } = tabs;

      // Determine if the orientation is horizontal (true) or vertical (false)
      const horizontal = !orientation;

      // Track scroll offset for later adjustments
      let offset = 0;

      // Define keyboard navigation actions based on orientation
      const keyActions = {
        [horizontal ? "ArrowRight" : "ArrowDown"]: (i: number) => (i + 1) % length,
        [horizontal ? "ArrowLeft" : "ArrowUp"]: (i: number) => (i - 1 + length) % length,
        Home: () => 0,
        End: () => length - 1,
      };

      // Function to activate a tab and its corresponding panel by ID
      function activateTabById(id: string) {
        // Find the tab matching the given ID
        const tab = tabs.find((t) => t.id.endsWith(id));

        if (tab) {
          // Show/hide panels based on the selected tab
          panels.forEach((p) => {
            const match = p.id !== tab.getAttribute("aria-controls");
            p.hidden = match;
            p.dataset.state = !match ? "active" : "inactive";
          });

          // Update tab selection state and focus
          tabs.forEach((t) => {
            const match = t === tab;
            t.setAttribute("aria-selected", String(match));
            t.setAttribute("tabindex", match ? "0" : "-1");
            t.dataset.state = match ? "active" : "inactive";
          });

          // Adjust scroll position if necessary
          if (offset !== 0) {
            scrollTo({ top: scrollY + root.getBoundingClientRect().top - offset });
            offset = 0;
          }
        }
      }

      // Add event listeners to each tab for keyboard and activation events
      tabs.forEach((tab, i) => {
        // Handle keyboard navigation
        tab.addEventListener("keydown", (e) => {
          const focusTargetIndex = keyActions[e.key]?.(i) ?? i;
          if (focusTargetIndex !== i) {
            e.preventDefault();
            tabs[focusTargetIndex].focus();
          }
        });

        // Handle tab activation
        tab.addEventListener(activation, () => {
          const id = tabs[i].id.split(":")[2];
          offset = root.getBoundingClientRect().top;
          if (isNaN(Number(id))) {
            // Emit event for custom ID
            emit(id);
          } else {
            // Activate by numeric ID
            activateTabById(id);
          }
        });
      });

      // Listen for external tab activation events
      on(activateTabById);
    }
  }

  // Define the custom element
  customElements.define("astro-tabs", AstroTabs);
</script>
